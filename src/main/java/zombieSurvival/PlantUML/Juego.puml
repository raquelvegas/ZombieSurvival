@startuml

package zombieSurvival.configuracionesAdicionales {
    class Cancion {
        - nombre : String
        - ruta : String
        --
        + Cancion(nombre: String, ruta: String)
        + getNombre() : String
        + getRuta() : String
        + toString() : String
    }

    class LogConfig {
        - static LOGGER : Logger
        --
        {static} + logInfo(mensaje: String) : void
        {static} + logWarning(mensaje: String) : void
    }
}

package zombieSurvival {

    class ControladorInfo {
        - Text infoText
        - Text infoTitle
        --
        + void infoEspanol()
        + void infoIngles()
        + void infoFrances()
        + void infoCroata()
        + void initialize()
    }

    class ControladorNuevaInterfaz {
        - Text refugioTitle
        - Text tunelTitle
        - Text riesgoTitle
        - Text descansoTitle
        - Text colaComedorTitle
        - Text comiendoTitle
        - Text comedorTitle
        - Text comidaTitle
        - Text zonaComunTitle
        - Text descansoText
        - Text colaComedorText
        - Text comedorText
        - Text comidaCount
        - Text zonaComunText
        - Text tunelXText...
        - Text riesgoXText...
        - Button mute
        - Button pausa
        - Button info
        - ToggleGroup grupoIdioma
        - RadioMenuItem espanol
        - RadioMenuItem ingles
        - RadioMenuItem frances
        - RadioMenuItem croata
        - MenuButton idioma
        - Spinner<Cancion> reproductor
        - Stage mainStage
        - Stage infoStage
        - ControladorInfo controllerInfo
        - MediaPlayer mediaPlayer
        - boolean isMuted
        - boolean estabaPausado
        - boolean infoWindow
        - List<Cancion> canciones
        - int cancionActual
        - int idiomaActual
        - Juego juego

        + setStage(Stage)
        + abrirInfo(ActionEvent)
        + cambiarCancionPorFlecha(MouseEvent)
        + mute(ActionEvent)
        + cambiarIdioma(ActionEvent)
        + pausar(ActionEvent)
        + initialize()
        - iniciarMusica()
        - iniciarInfo()
        + reproducirCancion(int)
        - siguienteCancion()
        - anteriorCancion()
        - actualizarCancion()
        - actualizarTextos()
        + getJuego(): Juego
        + getCancionActual(): int
    }

    class ControladorRemoto {
        - Text hRefugio
        - Text t1
        - Text t2
        - Text t3
        - Text t4
        - Text hR1
        - Text hR2
        - Text hR3
        - Text hR4
        - Text zR1
        - Text zR2
        - Text zR3
        - Text zR4
        - Text muertes1
        - Text muertes2
        - Text muertes3
        - Text errorInfo
        - MenuItem but1
        - boolean cambio
        - boolean start

        + void playPause()
        + boolean tocaCambio()
        + void cambio()
        + boolean isStart()
        + void setStart(boolean start)

        + void sethRefugio(String m)
        + void setT1(String m)
        + void setT2(String m)
        + void setT3(String m)
        + void setT4(String m)

        + void sethR1(String m)
        + void sethR2(String m)
        + void sethR3(String m)
        + void sethR4(String m)

        + void setzR1(String m)
        + void setzR2(String m)
        + void setzR3(String m)
        + void setzR4(String m)

        + void setMuertes1(String m)
        + void setMuertes2(String m)
        + void setMuertes3(String m)

        + Text getErrorInfo()
    }

    class Humano extends Thread {
        - Juego juego
        - int id
        - boolean comida
        - int tunel
        - boolean siendoAtacado
        - Random random
        - boolean herido
        - boolean vivo
        - long TIEMPO_ZONA_COMUN
        - long TIEMPO_ZONA_RIESGO
        - long TIEMPO_ZONA_DESCANSO

        + Humano(Juego juego, int id)
        + boolean isSiendoAtacado()
        + void setSiendoAtacado(boolean siendoAtacado)
        + void setComida(boolean comida)
        + void setHerido(boolean herido)
        + void setVivo(boolean vivo)
        - void convertirseEnZombie(int tunel)
        + void dormir(long tiempo) throws InterruptedException
        + synchronized void esperarAtaque()
        + void run()
    }

    interface InterfazRMI {
        + Integer humanosEnRefugio()
        + Integer humanosTunel1()
        + Integer humanosTunel2()
        + Integer humanosTunel3()
        + Integer humanosTunel4()
        + Integer humanosRiesgo1()
        + Integer humanosRiesgo2()
        + Integer humanosRiesgo3()
        + Integer humanosRiesgo4()
        + Integer zombisRiesgo1()
        + Integer zombisRiesgo2()
        + Integer zombisRiesgo3()
        + Integer zombisRiesgo4()
        + ArrayList<String> zombiesLetales()
        + boolean play_pause()
    }

    class InformacionServidor extends UnicastRemoteObject {
        - Juego juego

        + InformacionServidor(Juego juego)
        + Integer humanosEnRefugio()
        + Integer humanosTunel1()
        + Integer humanosTunel2()
        + Integer humanosTunel3()
        + Integer humanosTunel4()
        + Integer humanosRiesgo1()
        + Integer humanosRiesgo2()
        + Integer humanosRiesgo3()
        + Integer humanosRiesgo4()
        + Integer zombisRiesgo1()
        + Integer zombisRiesgo2()
        + Integer zombisRiesgo3()
        + Integer zombisRiesgo4()
        + ArrayList<String> zombiesLetales()
        + boolean play_pause()
    }

    class Juego {
        - ListaHilos zonaComun
        - ListaHilos zonaDescanso
        - ListaHilos comiendo
        - ListaHilos colaComedorTxt
        - Text textoComida
        - ArrayList<ListaHilos> esperaTuneles
        - ArrayList<ListaHilos> tunelesTxt
        - ArrayList<Tunel> tuneles
        - ArrayList<ListaHilos> vueltaTuneles
        - ArrayList<ZonaRiesgoH> riesgoIzq
        - ArrayList<ListaHilos> riesgoDch
        - LinkedBlockingDeque<String> colaComedor
        - ArrayList<CyclicBarrier> barrerasTuneles
        - boolean enPausa
        - boolean infoIn
        - ArrayList<Zombie> zombies
        - Lock cerrojoZ
        + humanosEnTunel(int): Integer
        + humanosEnRiesgo(int): Integer
        + zombiesEnRiesgo(int): Integer
        + zombiesMortales(): ArrayList<String>
        + nuevoZombie(Zombie)
        + pausar()
        + reanudar()
        + esperarSiPausado()
        + cruzarIda(Humano, int)
        + cruzarVuelta(Humano, int)
        + comer(Humano)
        + dejarComida(Humano)
    }

    class ListaHilos {
        - ArrayList<Thread> lista
        - Text text
        + ListaHilos(Text)
        + meter(Thread)
        + sacar(Thread)
        - imprimir()
        + getSize(): int
    }

    class MainCliente {
        + start(Stage) : void
        + main(String[]) : void
    }

    class MainServidor {
        - mainStage : Stage
        - controller : ControladorNuevaInterfaz
        - random : Random
        + start(Stage) : void
        - iniciarSimulacion() : void
        + main(String[]) : void
    }

    class Tunel {
        - id : int
        - cerrojo : Lock
        - esperandoEntrar : Condition
        - esperandoSalir : Condition
        - ocupado : boolean
        - enEsperaEntrar : int
        + Tunel(id : int)
        + isOcupado() : boolean
        + volverDentro(h : Humano) : void
        + salirAlExterior(h : Humano) : void
        + salirDelTunel() : void
    }

    class Zombie extends Thread {
        - id : int
        - juego : Juego
        - random : Random
        - contadorMuertes : int
        - TIEMPO_ATAQUE : long
        - TIEMPO_ESPERA : long
        + Zombie(juego : Juego, id : int)
        + getMuertes() : int
        - dormir(tiempo : long) : void
        - atacar(h : Humano) : void
        + run() : void
    }

    class ZonaRiesgoH {
        - humanos : ListaHilos
        - humanosDisponibles : ArrayList<Humano>
        - cerrojo : Lock
        - random : Random
        + ZonaRiesgoH(humanos : ListaHilos)
        + añadirHumano(h : Humano) : void
        + elegirHumano() : Humano
        + eliminarHumano(h : Humano) : void
        + getHumanos() : ListaHilos
    }

}


ControladorNuevaInterfaz --> Juego
ControladorNuevaInterfaz --> ControladorInfo
ControladorNuevaInterfaz --> Cancion
ControladorNuevaInterfaz --> ListaHilos
ControladorNuevaInterfaz --> ZonaRiesgoH

Humano --> Juego : usa

InformacionServidor --> Juego : usa
InformacionServidor ..|> InterfazRMI

Juego --> ListaHilos : contiene
Juego --> Tunel : contiene
Juego --> ZonaRiesgoH : contiene
Juego --> Zombie : contiene
Juego --> Humano : invoca métodos
Juego --> "Text" : actualiza
Juego --> "LinkedBlockingDeque" : maneja cola

ListaHilos --> Thread : usa
ListaHilos --> Text : usa

MainCliente ..> javafx.application.Application : extiende
MainCliente ..> javafx.stage.Stage : usa
MainCliente ..> javafx.fxml.FXMLLoader : usa
MainCliente ..> javafx.scene.Parent : usa
MainCliente ..> javafx.scene.Scene : usa
MainCliente ..> java.util.concurrent.ExecutorService : usa
MainCliente ..> java.util.concurrent.Executors : usa
MainCliente ..> zombieSurvival.ControladorRemoto : usa
MainCliente ..> zombieSurvival.InterfazRMI : usa
MainCliente ..> zombieSurvival.configuracionesAdicionales.LogConfig : usa
MainCliente ..> java.net.InetAddress : usa

MainServidor ..> javafx.application.Application : extiende
MainServidor ..> javafx.stage.Stage : usa
MainServidor ..> javafx.fxml.FXMLLoader : usa
MainServidor ..> javafx.scene.Parent : usa
MainServidor ..> javafx.scene.Scene : usa
MainServidor ..> javafx.scene.control.Alert : usa
MainServidor ..> javafx.scene.control.ButtonType : usa
MainServidor ..> javafx.scene.control.ProgressBar : usa
MainServidor ..> javafx.scene.image.ImageView : usa
MainServidor ..> javafx.animation.Timeline : usa
MainServidor ..> javafx.animation.KeyFrame : usa
MainServidor ..> javafx.animation.KeyValue : usa
MainServidor ..> javafx.util.Duration : usa
MainServidor ..> java.rmi.registry.Registry : usa
MainServidor ..> java.rmi.registry.LocateRegistry : usa
MainServidor ..> java.net.InetAddress : usa
MainServidor ..> java.rmi.Naming : usa
MainServidor ..> java.util.Random : usa
MainServidor ..> zombieSurvival.ControladorNuevaInterfaz : usa
MainServidor ..> zombieSurvival.InformacionServidor : usa
MainServidor ..> zombieSurvival.Zombie : usa
MainServidor ..> zombieSurvival.Humano : usa
MainServidor ..> zombieSurvival.configuracionesAdicionales.LogConfig : usa

Tunel ..> java.util.concurrent.locks.Lock : usa
Tunel ..> java.util.concurrent.locks.Condition : usa
Tunel ..> zombieSurvival.Humano : usa
Tunel ..> zombieSurvival.configuracionesAdicionales.LogConfig : usa

Zombie ..> zombieSurvival.Juego : usa
Zombie ..> zombieSurvival.Humano : usa
Zombie ..> zombieSurvival.configuracionesAdicionales.LogConfig : usa
Zombie ..> java.util.Random : usa

ZonaRiesgoH ..> ListaHilos : usa
ZonaRiesgoH ..> Humano : usa
ZonaRiesgoH ..> java.util.concurrent.locks.Lock : usa
ZonaRiesgoH ..> java.util.Random : usa
ZonaRiesgoH ..> java.util.ArrayList : usa


@enduml